"""
Django settings for setting_api project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DJANGO_DEBUG")))

ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_ALLOW_ALL = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "rest_framework",
    "apps.users",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "apps.core.utils.LoggingMiddleware",
]

ROOT_URLCONF = 'setting_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'setting_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    # Default is Master DB, can write/read
    "default": {
        "ENGINE": "django_postgrespool2",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": int(os.getenv("DB_PORT")),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{asctime} {levelname} {name} {funcName} {message}",
            "style": "{",
        }
    },
    "handlers": {
        "access_file": {
            "class": "logging.FileHandler",
            "filename": str(os.getenv("DJANGO_ACCESS_LOG_FILE", "access.log")),
            "formatter": "simple",
        },
        "info_file": {
            "class": "logging.FileHandler",
            "filename": str(os.getenv("DJANGO_INFO_LOG_FILE", "info.log")),
            "formatter": "simple",
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": str(os.getenv("DJANGO_ERROR_LOG_FILE", "error.log")),
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["access_file"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": True,
        },
        "apps": {
            "handlers": ["info_file", "error_file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (),
    "DEFAULT_PERMISSION_CLASSES": ("apps.core.permissions.UserPermissions",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "EXCEPTION_HANDLER": "apps.core.utils.exception_handler",
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_LOCATION"),
        "KEY_PREFIX": "cache",
        "OPTIONS": {
            "PASSWORD": os.getenv("REDIS_PASS"),
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

MIGRATION_MODULES = {"core": None, "users": None}
USE_THOUSAND_SEPARATOR = True


class DisableMigrations(object):
    def __contains__(self, item):
        return True

    def __getitem__(self, item):
        return None


CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_BROKER_TRANSPORT_OPTIONS = {"master_name": os.getenv("REDIS_DB_MASTER")}


KAFKA_SERVER = os.getenv("KAFKA_SERVER")

ACCESS_TOKEN_TIMEOUT = int(os.getenv("ACCESS_TOKEN_TIMEOUT", 3600))
ACCESS_TOKEN_TIMEOUT_FRONT_WEB = int(os.getenv("ACCESS_TOKEN_TIMEOUT_FRONT_WEB", 3600))
ACCESS_TOKEN_TIMEOUT_MOBILE = int(os.getenv("ACCESS_TOKEN_TIMEOUT_MOBILE", 3600))

FORGOT_PASSWD_TOKEN_TIMEOUT = os.getenv("FORGOT_PASSWD_TOKEN_TIMEOUT", 1800)

# Config for Redis Cluster Sentinel
REDIS_SENTINEL = os.getenv("REDIS_SENTINEL")
REDIS_PASS = os.getenv("REDIS_PASS")
REDIS_DB_MASTER = os.getenv("REDIS_DB_MASTER")

# Max connections of redis pool, default: 64
REDIS_POOL_MAX_CONNECTIONS = int(os.getenv("REDIS_POOL_MAX_CONNECTIONS", 64))

# Maximum wait seconds when run out of connections in pool, default: 20 sec
REDIS_POOL_BLOCK_TIMEOUT = int(os.getenv("REDIS_POOL_BLOCK_TIMEOUT", 20))

# Perform PING to check liveness of underlying connections
# if the connection idle for more than "value of this setting"
# Should set less than clients timeouts of Redis server "CONFIG GET timeout"
REDIS_HEALTH_CHECK_INTERVAL = int(os.getenv("REDIS_HEALTH_CHECK_INTERVAL", 5))

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = bool(os.getenv("EMAIL_USE_TLS"))
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT = int(os.getenv("EMAIL_PORT"))
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")
